"""This module will manage paths and other global parameters.

The aim is to be able to run the code elsewhere than on the server,
and to have easy maintenance when updating paths
used for the project.

"""
import os
from datetime import datetime

run_local = False  # By default, run on the server. Activating that flag will generate local paths
tf_caching_enabled = False  # By default, disable tensorflow caching flow all models.

DEFAULT_SPLIT_PATH = "/project/cq-training-1/project1/teams/team10/split"
DEFAULT_CATALOG_PATH = (
    "/project/cq-training-1/project1/data/catalog.helios.public.20100101-20160101.pkl"
)
DEFAULT_LOCAL_DATA_PATH = "../project1_data"

_local_data_path = DEFAULT_LOCAL_DATA_PATH


def get_image_reader_cache_directory() -> str:
    """Get the image reader cache directry.

    This will be the location where the pickled images
    will be put by the image reader.

    Returns:
        str -- [path where to put the pickled images]
    """
    if not run_local:
        if "SLURM_TMPDIR" in os.environ:
            ssd_dir = os.environ["SLURM_TMPDIR"]
            return ssd_dir + "/image_reader_cache/"
        else:
            return "/tmp/"
    else:
        return "../image_reader_cache/"


def get_tensorboard_log_directory() -> str:
    """Get the tensor board directory. By default, will give the path on the server.

    Returns:
        [str] -- [Tensorboard Log Directory]
    """
    run_directory = "run-" + datetime.now().strftime("%Y-%m-%d_%Hh%Mm%Ss")
    if not run_local:
        base_directory = "/project/cq-training-1/project1/teams/team10/tensorboard/"
    else:
        base_directory = "tensorboard/"
    log_directory = base_directory + run_directory
    return log_directory


def get_split_path() -> str:
    """Get the path where to find the train/validation/test split.

    Returns:
        [str] -- [Path for the pickled split files]
    """
    if not run_local:
        return DEFAULT_SPLIT_PATH
    else:
        return "split"


def get_catalog_path() -> str:
    """Get the path to the pickled catalog dataframe.

    Returns:
        str -- [Pickled catalog dataframe file path]
    """
    if not run_local:
        return DEFAULT_CATALOG_PATH
    else:
        return _local_data_path + "/catalog.helios.public.20100101-20160101.pkl"


def get_tf_cache_file() -> str:
    """Gets the main filename for the tensorflow cache.

    Other filenames will be generated by tensorflow, but this is transparent.

    Returns:
        [str] -- [Tensorflow main cache filename]
    """
    if not run_local:
        return "/project/cq-training-1/project1/teams/team10/cached/cached"
    else:
        return "defaut_tf_cache"


def get_local_data_path() -> str:
    """Returns the basepath for local data.

    Returns:
        [str] -- [Base path for local data]
    """
    return DEFAULT_LOCAL_DATA_PATH
